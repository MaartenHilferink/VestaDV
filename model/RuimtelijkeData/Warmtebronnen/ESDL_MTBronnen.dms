container ESDL_MTBronnen
{  
	container MT_warmtebronnen_Schema
	{
		unit<uint32> area
		{
			attribute<string> id;
			attribute<string> name;
			
			unit<uint32> area
			{
			}
			
			unit<uint32> asset // ResidualHeatSource
			{
				attribute<string> xsi_type;
				attribute<string> id;
				attribute<string> name;
				attribute<string> commissioningDate;
				attribute<string> decommissioningDate;
				attribute<string> power;
				
				unit<uint32> geometry
				{
					attribute<string> CRS;
					attribute<string> lat;
					attribute<string> lon;
				}
				
				unit<uint32> KPI
				{
					attribute<string> value;
					attribute<string> name;
				}
			}
			unit<uint32> potential // ResidualHeatSource
			{
				attribute<string> xsi_type;
				attribute<string> id;
				attribute<string> name;
				
				unit<uint32> geometry
				{
					attribute<string> CRS;
					attribute<string> lat;
					attribute<string> lon;
				}
			}
		}
	}

	parameter<string> ESDL_Warmtebronnen: StorageName = "=SharedInvoer/WarmtebronnenEsdlPath", StorageType = "str";
		
	container Parsed_Warmtebronnen := parse_xml(ESDL_Warmtebronnen, MT_warmtebronnen_Schema);
	
	unit<uint32> Read_Bronnen := Parsed_Warmtebronnen/area/asset
	, FreeData = "false"
	, DialogData = "point"
	, DialogType = "map" 
	{
		attribute<rdc_meter>  point         := LatLongWgs842RD(point(value(first(Geometry/lat, Geometry/bron_rel), float64),value(first(Geometry/lon, Geometry/bron_rel), float64),dpoint), rdc_meter);
		attribute<string>     Bron_naam     := Parsed_Warmtebronnen/area/asset/name;
		attribute<string>     label         := KPI/value[invert(KPI/name == 'label'         ? convert(KPI/parent_rel,.) : value(0/0, .))];
		attribute<MW>          power         := value(Parsed_Warmtebronnen/area/asset/power, Mw);
		attribute<yr_uint16>  ingebruik     := MakeDefined(value(left(Parsed_Warmtebronnen/area/asset/commissioningDate, 4),yr_uint16),1999[yr_uint16]);
		attribute<yr_uint16>  uitgebruik    := MakeDefined(value(left(Parsed_Warmtebronnen/area/asset/decommissioningDate, 4),yr_uint16),2100[yr_uint16]);
		attribute<Invoer/RuimtelijkeData/WarmteBronnen/LtWarmte/categorie>    Categorie_rel := value(KPI/value[invert(KPI/name == 'categorie_rel' ? convert(KPI/parent_rel,.) : value(0/0, .))],Invoer/RuimtelijkeData/WarmteBronnen/LtWarmte/categorie);
		attribute<MW>         MWth_max      := power, Descr = "Maximale capaciteit waarvoor de bron kan worden ingezet";
		attribute<ratio>      Bron_vol      := MakeDefined(value(KPI/value[invert(KPI/name == 'bron_vol'      ? convert(KPI/parent_rel,.) : value(0/0, .))],ratio),0.8[Ratio]), Descr = "Aandeel op secundair netvolume dat de bron voor rekening kan nemen";
		attribute<ratio>      Bron_cap      := MakeDefined(value(KPI/value[invert(KPI/name == 'bron_cap'      ? convert(KPI/parent_rel,.) : value(0/0, .))],ratio),0.3[Ratio]), Descr = "Aandeel op secundaire netcapaciteit dat de bron voor rekening kan nemen";
		attribute<Celsius>    T_bron        := MakeDefined(value(KPI/value[invert(KPI/name == 'T_bron'        ? convert(KPI/parent_rel,.) : value(0/0, .))],Celsius),70[Celsius]), Descr = "Temperatuur welke de bron maximaal kan leveren zonder hulpvoorziening";
		attribute<kW>         P_ow_max      := MakeDefined(value(KPI/value[invert(KPI/name == 'P_ow_max'      ? convert(KPI/parent_rel,.) : value(0/0, .))],kW),0[kw]);
		attribute<Eur_kW>     Ki_kW_min     := MakeDefined(value(KPI/value[invert(KPI/name == 'Ki_kW_min'     ? convert(KPI/parent_rel,.) : value(0/0, .))],Eur_kW),150[Eur_kW]);
		attribute<Eur_kW>     Ki_kW_max     := MakeDefined(convert(KPI/value[invert(KPI/name == 'Ki_kW_max'     ? convert(KPI/parent_rel,.) : value(0/0, .))],Eur_kW),1800[Eur_kW]);
		attribute<Eur_GJ>     K_GJ          := MakeDefined(value(KPI/value[invert(KPI/name == 'K_GJ'          ? convert(KPI/parent_rel,.) : value(0/0, .))],Eur_GJ),0[Eur_GJ]);
		attribute<bool>       IsBron        := IsDefined(point);
		
		unit<uint32> KPI := Parsed_Warmtebronnen/area/asset/KPI
		{
			attribute<..>     bron_rel := value(KPI/Parent_rel, ..);
		}
		unit<uint32> Geometry := Parsed_Warmtebronnen/area/asset/Geometry
		{
			attribute<..> bron_rel := value(Geometry/Parent_rel, ..);
		}
	}
	
	unit<uint32> Bronnen := subset(Read_Bronnen/IsBron)
	, DialogData = "point"
	, DialogType = "map" 
	{
		attribute<rdc_meter>  point         := Read_Bronnen/point[nr_OrgEntity];
		attribute<string>     Bron_naam     := Read_Bronnen/Bron_naam[nr_OrgEntity];
		attribute<string>     label         := Read_Bronnen/label[nr_OrgEntity];
		attribute<yr_uint16>  ingebruik     := Read_Bronnen/ingebruik[nr_OrgEntity];
		attribute<yr_uint16>  uitgebruik    := Read_Bronnen/uitgebruik[nr_OrgEntity];
		attribute<Invoer/RuimtelijkeData/WarmteBronnen/LtWarmte/categorie>    Categorie_rel := Read_Bronnen/Categorie_rel[nr_OrgEntity];
		attribute<MW>         MWth_max      := Read_Bronnen/MWth_max[nr_OrgEntity];
		attribute<ratio>      Bron_vol      := Read_Bronnen/Bron_vol[nr_OrgEntity];
		attribute<ratio>      Bron_cap      := Read_Bronnen/Bron_cap[nr_OrgEntity];
		attribute<Celsius>    T_bron        := Read_Bronnen/T_bron[nr_OrgEntity];
		attribute<kW>         P_ow_max      := Read_Bronnen/P_ow_max[nr_OrgEntity];
		attribute<Eur_kW>     Ki_kW_min     := Read_Bronnen/Ki_kW_min[nr_OrgEntity];
		attribute<Eur_kW>     Ki_kW_max     := Read_Bronnen/Ki_kW_max[nr_OrgEntity];
		attribute<Eur_GJ>     K_GJ          := Read_Bronnen/K_GJ[nr_OrgEntity];
		
		attribute<Geography/RegioIndelingen/gemeente> gem_rel_P      := point_in_polygon(point, Geography/RegioIndelingen/gemeente/Geometry);
		attribute<Geography/RegioIndelingen/gemeente> target_gem_rel := MakeDefined(rlookup(targetGMC,Geography/RegioIndelingen/gemeente/GM_CODE),gem_rel_P);

		attribute<bool> inStudieGebied := Invoer/RuimtelijkeData/StudieGebied/selected_per_gemeente[target_gem_rel];
	}

}
